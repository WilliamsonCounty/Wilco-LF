<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Laserfiche.DocumentServices</name>
    </assembly>
    <members>
        <member name="T:Laserfiche.DocumentServices.DSMethodTracer">
            <summary>
            Provides access to a static instance of MethodTracer for logging DocumentServices messages.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.DSMethodTracer.InitializeMethodTracer(System.String)">
            <summary>
            Start the trace logger for DocumentServices.
            </summary>
            <param name="logFilePath">A <c>string</c> instance which references the output
            file path of the trace logger.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DSMethodTracer.InitializeMethodTracer(System.String,System.Boolean)">
            <summary>
            Start the trace logger for DocumentServices.
            </summary>
            <param name="logFilePath">A <c>string</c> instance which references the output
            file path of the trace logger.</param>
            <param name="logConsole">The flag to turn on console output.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DSMethodTracer.ShutdownMethodTracer">
            <summary>
            Shuts down the trace logger for DocumentServices.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper">
            <summary>
            Defines the interface an image processing engine capable of decomposing a single page document image
            into a composition of multiple images with the same appearance as the original page, for the purpose 
            of enhancing PDF compression.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.GetSupportedPDFXConformanceList">
            <summary>
            Returns the list of <c>PDFXConformance</c> enumerations that this engine is capable of.
            </summary>
            <remarks>
            All implementations must include <c>PdfWriter.PDFXNONE</c> as one of the supported conformance 
            enumerations.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.PDFXConformance">
            <summary>
            Gets or sets the <c>PDFXConformance</c> that this engine instance should apply when performing the
            image decomposition.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The conformance value is not contained in the list of values returned from the 
            <c>GetSupportedPDFXConformanceList()</c> method.
            </exception>
            <remarks>
            All implementations must include <c>PdfWriter.PDFXNONE</c> as one of the supported conformance 
            enumerations.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.PdfVersion">
            <summary>
            Gets or sets the <c>PdfVersion</c> that this engine instance should use when choosing
            an image decomposition strategy in order to be conformant with the PDF version.
            </summary>
            <remarks>
            The value set to the <c>PdfVersion</c> property must be the same as the value used to 
            initialize the PdfWriter.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.SupportsAsync">
            <summary>
            Indicates if this engine instance supports the <see cref="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.ProcessAsync(Laserfiche.RepositoryAccess.IPageContents,System.Threading.Tasks.Task{Laserfiche.Imaging.LfiBitmapSource},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken,System.Threading.Tasks.TaskScheduler)"/> method, 
            which can process multiple pages at once.
            </summary>
            <remarks>
            This is an optional feature that may not be supported by all image decomposition 
            engines. For engines capable of this feature, one must follow the protocol 
            outlined in the <see cref="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.ProcessAsync(Laserfiche.RepositoryAccess.IPageContents,System.Threading.Tasks.Task{Laserfiche.Imaging.LfiBitmapSource},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken,System.Threading.Tasks.TaskScheduler)"/> method for correct operation.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.Process(Laserfiche.RepositoryAccess.IPageContents,Laserfiche.Imaging.LfiBitmapSource,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs image decomposition for the document page.
            </summary>
            <param name="pageInfo">The document page information.</param>
            <param name="pageBitmap">The page image.</param>
            <param name="settings">Additional implementation-specific settings.</param>
            <returns>
            The decomposition result. To apply this result to a <c>PdfWriter</c>, call its 
            <see cref="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.WriteToPdfPage(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter)"/>
            method.
            </returns>
            <remarks>
            <para>This method is executed synchronously on the caller's thread.</para>
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.ProcessAsync(Laserfiche.RepositoryAccess.IPageContents,System.Threading.Tasks.Task{Laserfiche.Imaging.LfiBitmapSource},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken,System.Threading.Tasks.TaskScheduler)">
            <summary>
            <para>(Optional) Performs image decomposition for the document page asynchronously.</para>
            </summary>
            <param name="pageInfo">The document page information.</param>
            <param name="pageBitmapTask">
            A <see cref="T:System.Threading.Tasks.Task`1"/> from which the page image can be obtained.
            </param>
            <param name="settings">Additional implementation-specific settings.</param>
            <param name="cancellationToken">
            Cancellation token. If cancellation is not needed, use <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <param name="taskScheduler">Task scheduler. (Optional)</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the scheduled 
            image decomposition task.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            This engine instance does not support asynchronous image processing.
            </exception>
            <remarks>
            <para>
            Caller must check for <see cref="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper.SupportsAsync"/> property before using this method.
            </para>
            <para>
            Implementations must adhere to the following protocol.
            </para>
            <para>
            (1) Upon entering the method, a task continuation for performing the image decomposition 
            shall be created on the <c>pageBitmapTask</c>, along with any optional arguments that
            are not null. 
            </para>
            <para>
            (2) The implementation should apply <see cref="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning"/> 
            and <see cref="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness"/>.
            </para>
            <para>
            (3) The method shall return immediately with the task continuation. The method must 
            not wait on the <c>pageBitmapTask</c>.
            </para>
            <para>
            (4) Implementation of the image decomposition engine must not apply throttling based on 
            thread-count. Doing so may cause a deadlock.
            </para>
            <para>
            (5) Because the processing time for each page differs, some pages with a higher page number
            may finish processing ahead of pages with a lower page number. Users of the 
            <c>IPdfImageDecompositionResult</c> class must perform the necessary reordering based on the 
            <c>PageInfo</c> property.
            </para>
            </remarks>
        </member>
        <member name="T:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult">
            <summary>
            <para>
            An opaque interface representing the decomposition result of a document page image into 
            a composition of multiple images with the same appearance as the original page, for the 
            purpose of enhancing PDF compression.
            </para>
            </summary>
            <remarks>
            <para>
            The minimum function of this interface is to add all of the images into 
            an iTextSharp PDF Document, with the appropriate composition options applied.
            </para>
            <para>
            The internal representation of these images is dependent on the image decomposition engine
            that creates the result instance. When the opaque interface is used, it is not possible to
            access the individual images. 
            </para>
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.PageInfo">
            <summary>
            The original document page information.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.PDFXConformance">
            <summary>
            The PDF conformance level used when this decomposition result is created.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.PdfVersion">
            <summary>
            The PDF version used when this decomposition result is created.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.Width">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.Height">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.AbsoluteX">
            <summary>
            Image position.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.AbsoluteY">
            <summary>
            Image position.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.DpiX">
            <summary>
            Image resolution.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.DpiY">
            <summary>
            Image resolution.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScaledWidth">
            <summary>
            Scaled width.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScaledHeight">
            <summary>
            Scaled height.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScalePercent(System.Single)">
            <summary>
            Change the scaled width and height.
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScalePercent(System.Single,System.Single)">
            <summary>
            Change the scaled width and height.
            </summary>
            <param name="percentX"></param>
            <param name="percentY"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Change the page size when writing to the PDF.
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Change the page margins when writing to the PDF.
            </summary>
            <param name="marginLeft"></param>
            <param name="marginRight"></param>
            <param name="marginTop"></param>
            <param name="marginBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScaleAbsolute(System.Single,System.Single)">
            <summary>
            Set the scaled width and height to the exact size as specified.
            </summary>
            <param name="newWidth"></param>
            <param name="newHeight"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScaleAbsoluteHeight(System.Single)">
            <summary>
            Set the scaled height to the exact size as specified.
            </summary>
            <param name="newHeight"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScaleAbsoluteWidth(System.Single)">
            <summary>
            Set the scaled width to the exact size as specified.
            </summary>
            <param name="newWidth"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.SetAbsolutePosition(System.Single,System.Single)">
            <summary>
            Set the absolute position.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.ScaleToFit(System.Single,System.Single)">
            <summary>
            Sets the scaled width and height so that it will fit the specified dimensions.
            The aspect ratio will be maintained.
            </summary>
            <param name="fitWidth"></param>
            <param name="fitHeight"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.SetDpi(System.Int32,System.Int32)">
            <summary>
            Changes the resolution.
            </summary>
            <param name="dpiX"></param>
            <param name="dpiY"></param>
        </member>
        <member name="M:Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult.WriteToPdfPage(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter)">
            <summary>
            Writes the composition of images to the current PDF page. Appropriate settings 
            will be applied based on this object's properties, including the positional,
            scaling, and PDF version and conformance.
            </summary>
            <param name="pdfDocument"></param>
            <param name="pdfWriter"></param>
        </member>
        <member name="T:Laserfiche.DocumentServices.ListImporterException">
            <summary>
            Represents an error raised by the <c>ListImporter</c> class.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ListImporterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <c>ListImporterException</c> class.
            </summary>
            <param name="message">The message to store in the instance.</param>
            <param name="innerException">An optional reference to an inner exception instance.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.ListImporter">
            <summary>
            Implements processing Laserfiche list import files (.LST) that can be used
            to import electronic documents and pages into a Laserfiche repository.
            Please see the <c>ImportEngine</c> class for a more modern alternative.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.RootPath">
            <summary>
            Gets or sets the path in the Laserfiche repository to treat as the root
            of the folder tree when importing.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.VolumeName">
            <summary>
            Gets or sets the name of the Laserfiche volume used when creating documents.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.TruncateLongValues">
            <summary>
            Gets or sets a boolean indicating if field values that are longer than what
            the field can store should be silenty truncated.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.AutonameParseName">
            <summary>
            Gets or sets a boolean indicating if client-side tokens, such as %(Count), in
            entry names should be parsed and substituted.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.AutonameCounter">
            <summary>
            Gets or sets the counter to be used when appending a number to a name during
            automatic entry naming if there is a name conflict in a folder.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.AutonameCounterLength">
            <summary>
            Gets or sets the length of the counter appended to entry names during an
            automatic rename process.  Numbers shorter than the specified length have
            0 digits prepended.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ListImporter.Session">
            <summary>
            Gets a reference to the <c>Session</c> instance used to communicate
            with Laserfiche.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ListImporter.#ctor(Laserfiche.RepositoryAccess.Session)">
            <summary>
            Initializes a new instance of the <c>ListImporter</c> class.
            </summary>
            <param name="session">A reference to the <c>Session</c> instance used to communicate
            with Laserfiche.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ListImporter.ImportListFile(System.IO.TextReader,System.String)">
            <summary>
            Processes a Laserfiche import list (.LST) file.
            </summary>
            <param name="reader">A <c>TextReader</c> instance that will be used to read the
            contents of the import list file.</param>
            <param name="workingDir">A directory path that will be used as the base directory
            when resolving file names and relative paths in the import list file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ListImporter.ImportListFile(System.String)">
            <summary>
            Processes a Laserfiche import list (.LST) file.  The parent directory of
            the import list file is taken to be the working directory.
            </summary>
            <param name="listFile">The path to the import list file to process.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.ChecksumMismatchEventArgs">
            <summary>
            Contains event data specific to a checksum mismatch event when exporting data
            from a Laserfiche document.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ChecksumMismatchEventArgs.StoredChecksum">
            <summary>
            Gets the checksum that is stored in the repository database for the data stream.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ChecksumMismatchEventArgs.ComputedChecksum">
            <summary>
            Gets the checksum that was computed by Laserfiche when retrieving the data stream.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ChecksumMismatchEventArgs.Algorithm">
            <summary>
            Gets the algorithm used to calculate the checksum.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ChecksumMismatchEventArgs.ChecksumPresent">
            <summary>
            Gets a boolean indicating if the checksum is actually present.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ChecksumMismatchEventArgs.StopProcessing">
            <summary>
            Gets or sets a boolean telling the exporter to stop exporting.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.ITarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.#ctor(Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream)">
            <summary>
            Initialise a TarArchive for output.
            </summary>
            <param name="stream">The <see cref="T:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream"/> to use for output.</param> 
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepOldFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.AsciiTranslate">
            <summary>
            Get or set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.ApplyUserInfoOverrides"/> is set to true by this call.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.RecordSize">
            <summary>
            Get the archive's record size. Tar archives are composed of
            a series of RECORDS each containing a number of BLOCKS.
            This allowed tar archives to match the IO characteristics of
            the physical device being used. Archives are expected
            to be properly "blocked".
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.WriteEntry(Laserfiche.DocumentServices.ZipLib.Tar.ITarEntry)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The LfTarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.WriteEntryCore(Laserfiche.DocumentServices.ZipLib.Tar.ITarEntry)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The LfTarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by the FileStream.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.Close">
            <summary>
            Closes the archive and releases any associated resources.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to write to</param>
            <returns>Returns a <see cref="!:TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a <see cref="!:TarArchive">tar archive</see> for writing.
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
            <returns>Returns a <see cref="!:TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
            <value>The record size in bytes.
            This is equal to the <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.BlockFactor"/> multiplied by the <see cref="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.BlockSize"/></value>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
            <value>This is the number of block in each record.</value>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct LfTarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">Output stream for buffer</param>
            <returns>A new <see cref="T:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct LfTarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.IsEndOfArchiveBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates the End of an Archive has been reached.
            End of archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.CurrentBlock">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.CurrentRecord">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buffer">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buffer.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.WriteRecord">
            <summary>
            Write a LfTarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.Flush">
            <summary>
            Flush the current record if it has any data in it.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarBuffer.Close">
            <summary>
            Close the LfTarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Name">
            <summary>
            Get or set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Mode">
            <summary>
            Get or set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GroupId">
            <summary>
            Get or set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Size">
            <summary>
            Get or set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.ModTime">
            <summary>
            Get or set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.TypeFlag">
            <summary>
            Get or set the entry's type flag.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Magic">
            <summary>
            Get or set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GroupName">
            <summary>
            Get or set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.DevMajor">
            <summary>
            Get or set the entry's major device number.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.DevMinor">
            <summary>
            Get or set the entry's minor device number.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Clone">
            <summary>
            Create a new <see cref="T:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outBuffer">output buffer for header information</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buffer">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">
            the value to be converted to octal
            </param>
            <param name = "buffer">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">Value to be convert to octal</param>
            <param name = "buffer">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "value"></param>
            <param name = "buffer">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_ACL">
            <summary>
            Solaris access control redactions file type
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ZipLib.Tar.LfTarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's LfTarBuffer.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.IsEntryOpen">
            <summary>
            Get a value indicating wether an entry is open, requiring more data to be written.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct LfTarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct LfTarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek to</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to store read bytes in.</param>
            <param name="offset">The index into the buffer to being storing bytes at.</param>
            <param name="count">The desired number of bytes to read.</param>
            <returns>The total number of bytes read, or zero if at the end of the stream.
            The number of bytes may be less than the <paramref name="count">count</paramref>
            requested if data is not avialable.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF block of nulls is written.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            </summary>
            <remarks>This means that Finish() is called followed by calling the
            LfTarBuffer's Close().</remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.PutNextEntry(Laserfiche.DocumentServices.ZipLib.Tar.ITarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <b>must</b> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The LfTarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="value">
            The byte to be written.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by LfTarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "buffer">
            The buffer to write to the archive.
            </param>
            <param name = "offset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "count">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.LfTarOutputStream.WriteEofBlock">
            <summary>
            Write an EOF (end of archive) block to the tar archive.
            An EOF block consists of all zeros.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.ZipLib.Tar.TarException">
            <summary>
            Represents an error encountered when processing a TAR archive.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.TarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.TarException.#ctor">
            <summary>
            Initializes a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.TarException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ZipLib.Tar.TarException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the TarException class with a specified message
            and inner exception reference..
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.DocumentPageFormat">
            <summary>
            Enumeration of document page formats supported by <c>DocumentExporter</c>.
            </summary>
            <remarks>
            Some light-colored annotations (like yellow highlights) will not show up in 1-bit images.
            </remarks>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Tiff">
            <summary>
            Tagged Image File Format (TIFF) image: CCITT Group IV compression for
            bitonal images and LZW compression for other bit depths
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Png">
            <summary>
            Portable Network Graphics (PNG) format image
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Bmp">
            <summary>
            Windows bitmap (BMP) format image
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Jpeg">
            <summary>
            Joint Photographic Experts Group (JPEG) format image
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Gif">
            <summary>
            Graphics Interchange Format (GIF) image
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Pcx">
            <summary>
            ZSoft's PC Paintbrush (PCX) format image
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.TiffJpeg">
            <summary>
            Tagged Image File Format (TIFF) image using JPEG compression for non-bitonal
            images and CCITT Group IV compression for bitonal images
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.JpegXR">
            <summary>
            JPEG XR (formerly Windows Media Photo and HD Photo) format image
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.TiffFlate">
            <summary>
            TIFF with Flate (zlib/RFC 1951) encoding
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.DocumentPageFormat.Text">
            <summary>
            Page text portion
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PdfExportOptions">
            <summary>
            Enumeration of options that control how PDFs are exported.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.None">
            <summary>
            No PDF export option selected.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.IncludeElecDoc">
            <summary>
            Include any electronic document as a PDF attachment.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.IncludeText">
            <summary>
            Include the text of the document so that the PDF is searchable.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictDegradedPrinting">
            <summary>
            Restrict degraded printing.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictModifyContents">
            <summary>
            Restrict modifying the contents.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictCopying">
            <summary>
            Restrict copying text.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictModifyAnnotations">
            <summary>
            Restrict annotating the document.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictFillIn">
            <summary>
            Restrict filling in forms.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictScreenReaders">
            <summary>
            Restrict screen readers from reading the document.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictDocumentAssembly">
            <summary>
            Restrict reordering pages.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RestrictPrinting">
            <summary>
            Restrict printing.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.PdfAConformance">
            <summary>
            Export as PDF/A-1b.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.CreateBlankImageOnEmptyPdf">
            <summary>
            Export a single blank page when the PDF would otherwise have no pages. This is
            the default behavior so this option has no effect.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfExportOptions.RenderAnnotationsAsImage">
            <summary>
            When exporting Laserfiche annotations, render them directly on to
            the image to be exported rather than as PDF annotations.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PdfEncryption">
            <summary>
            Enumeration of supported PDF encryption algorithms.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfEncryption.RC4_40Bit">
            <summary>
            RC4 encryption with 40-bit keys for low security applications
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfEncryption.RC4_128Bit">
            <summary>
            RC4 encryption with 128-bit keys
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PdfPageSize">
            <summary>
            Enumeration of supported PDF page sizes.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Letter">
            <summary>
            U.S. letter/ANSI A size, 8.5" x 11", 216 x 280 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Legal">
            <summary>
            Legal size, 8.5" x 14", 216 x 356 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Ledger">
            <summary>
            Ledger size, 17" x 11", 432 x 280 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Tabloid">
            <summary>
            Tabloid/ANSI B size, 11" x 17", 280 x 432 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Halfletter">
            <summary>
            U.S. half-letter size, 8.5" x 5.5", 216 x 140 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Folio">
            <summary>
            Foolscap folio size, 8.27" x 13", 210 x 330 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Executive">
            <summary>
            Executive size, 7.25" x 10.5", 184 x 267 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Quarto">
            <summary>
            Quarto size, 9" x 11", 229 x 280 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.USStdFanfold">
            <summary>
            U.S. standard fanfold size, 11" x 14.875", 279 x 377 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.SuperB">
            <summary>
            Super-B size, 13" x 19", 330 x 483 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.USGovtLetter">
            <summary>
            (Old) U.S. government letter size, 8" x 10.5"
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A0">
            <summary>
            ISO A0 size, 841 x 1189 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A1">
            <summary>
            ISO A1 size, 594 x 841 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A2">
            <summary>
            ISO A2 size, 420 x 594 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A3">
            <summary>
            ISO A3 size, 297 x 420 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A4">
            <summary>
            ISO A4 size, 210 x 297 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A5">
            <summary>
            ISO A5 size, 148 x 210 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A6">
            <summary>
            ISO A6 size, 105 x 148 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A7">
            <summary>
            ISO A7 size, 74 x 105 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A8">
            <summary>
            ISO A8 size, 52 x 74 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A9">
            <summary>
            ISO A9 size, 37 x 52 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.A10">
            <summary>
            ISO A10 size, 26 x 37 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B0">
            <summary>
            ISO B0 size, 1000 x 1414 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B1">
            <summary>
            ISO B1 size, 707 x 1000 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B2">
            <summary>
            ISO B2 size, 500 x 707 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B3">
            <summary>
            ISO B3 size, 353 x 500 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B4">
            <summary>
            ISO B4 size, 250 x 353 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B5">
            <summary>
            ISO B5 size, 176 x 250 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B6">
            <summary>
            ISO B6 size, 125 x 176 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B7">
            <summary>
            ISO B7 size, 88 x 125 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B8">
            <summary>
            ISO B8 size, 62 x 88 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B9">
            <summary>
            ISO B9 size, 44 x 62 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.B10">
            <summary>
            ISO B10 size, 31 x 44 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.ArchA">
            <summary>
            Arch A size, 9" x 12", 229 x 305 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.ArchB">
            <summary>
            Arch B size, 12" x 18", 305 x 457 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.ArchC">
            <summary>
            Arch C size, 18" x 24", 457 x 610 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.ArchD">
            <summary>
            Arch D size, 24" x 36", 610 x 914 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.ArchE">
            <summary>
            Arch E size, 36" x 48", 914 x 1219 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.ArchE1">
            <summary>
            Arch E1 size, 30" x 42", 762 x 1067 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.JisB4">
            <summary>
            JIS B4 size, 257 x 364 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.JisB5">
            <summary>
            JIS B5 size, 182 x 257 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.JisB6">
            <summary>
            JIS B6 size, 128 x 182 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.F4">
            <summary>
            F4 paper size, 210 x 330 mm
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.PdfPageSize.Statement">
            <summary>
            U.S. Statement size, 5.5" x 8.5", 140 x 216 mm
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PdfPageMargins">
            <summary>
            Stores the page margins of a PDF document.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfPageMargins.#ctor">
            <summary>
            Initializes an instance of <c>PdfPageMargins</c> with default values.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfPageMargins.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes an instance of <c>PdfPageMargins</c> with the specified values.
            </summary>
            <param name="left">The width of the left margin, in points.</param>
            <param name="top">The width of the top margin, in points.</param>
            <param name="right">The width of the right margin, in points.</param>
            <param name="bottom">The width of the bottom margin, in points.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfPageMargins.Equals(Laserfiche.DocumentServices.PdfPageMargins)">
            <summary>
            Determines if two <c>PdfPageMargins</c> instances are equal.
            </summary>
            <param name="other">A <c>PPdfPageMargins</c> instance to compare for equality.</param>
            <returns>True if the argument and this instance have the same margins, false otherwise.</returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.Left">
            <summary>
            Gets or sets the left margin, in points.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.LeftInches">
            <summary>
            Gets the left margin, in inches.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.LeftMm">
            <summary>
            Gets the left margin, in millimeters.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.Top">
            <summary>
            Gets or sets the top margin, in points.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.TopInches">
            <summary>
            Gets the top margin, in inches.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.TopMm">
            <summary>
            Gets the top margin, in millimeters.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.Right">
            <summary>
            Gets or sets the right margin, in points.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.RightInches">
            <summary>
            Gets the right margin, in inches.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.RightMm">
            <summary>
            Gets the right margin, in millimeters.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.Bottom">
            <summary>
            Gets or sets the bottom margin, in points.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.BottomInches">
            <summary>
            Gets the bottom margin, in inches.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfPageMargins.BottomMm">
            <summary>
            Gets the bottom margin, in millimeters.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PageExportedEventArgs">
            <summary>
            Data for a page exported event fired by <c>DocumentExporter</c>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageExportedEventArgs.PageIndex">
            <summary>
            The zero-based index of the current page in the list of pages being exported
            in this operation.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageExportedEventArgs.PageCount">
            <summary>
            The total number of pages to export.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageExportedEventArgs.StopProcessing">
            <summary>
            A boolean indicating if <c>DocumentExporter</c> should cancel the export operation.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.DocumentExporter">
            <summary>
            Provides the ability to export documents, or selected portions of documents
            in a variety of image formats, as plain-text, or as a PDF (Portable Document Format)
            file.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.MapStringToFileName(System.String)">
            <summary>
            Replaces characters in the provided string that are not valid file name
            characters in the FAT and NTFS file systems with an underscore ('_').
            </summary>
            <param name="input">The string to map to a valid file name.</param>
            <returns>A string that identical to the input but that has all invalid
            file name characters replaced with an underscore.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.MapStringToFileName(System.String,System.Char)">
            <summary>
            Replaces characters in the provided string that are not valid file name
            characters in the FAT and NTFS file systems with the specified character.
            </summary>
            <param name="input">The string to map to a valid file name.</param>
            <param name="replacement">The replacement character.</param>
            <returns>A string that identical to the input but that has all invalid
            file name characters replaced with the replacement character.</returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.PageFormat">
            <summary>
            Gets or sets a member of the <c>DocumentPageFormat</c> enumeration
            which specifies the format to export the selected pages in.
            </summary>
            <remarks>
            This property is ignored when exporting PDFs.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.BitsPerPixel">
            <summary>
            Gets or sets the color depth of exported images, in bits per pixel.  A value
            of 0 indicates to use the value of the source image where possible, and to
            auto-convert where necessary.
            </summary>
            <remarks>
            This property is ignored when exporting PDFs.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.AllowInterpolation">
            <summary>
            Gets or sets a value indicating if a resize operation should allow interpolation.
            </summary>
            <remarks>
            This property is ignored when exporting PDFs.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.CompressionQuality">
            <summary>
            Gets or sets the compression quality for image types which support a
            configurable compression level.  Ranges from 0 (most compression, lowest
            image quality) to 100 (least compression, highest image quality).  If
            lossless compression is available, set <c>CompressionQuality</c> to 100
            to enable it.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.AdditionalFonts">
            <summary>
            Gets or sets a list of paths to additional font files to reference
            when exporting PDFs.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.PdfPageSize">
            <summary>
            Gets or sets a value of the <c>PdfPageSize</c> enumeration which
            specifies the size of each page when exporting a PDF.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.PdfPageMargins">
            <summary>
            Gets or sets the margins that will be used for each page when exporting a PDF.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.TextEncoding">
            <summary>
            Gets or sets the character set encoding used when exporting the document
            in plain text format.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.IncludeAnnotations">
            <summary>
            Gets or sets a boolean indicating whether to include annotations in the
            exported pages.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.ExcludedAnnotationTypes">
            <summary>
            Gets or sets a list of Laserfiche annotation types which will be filtered
            out when exporting pages.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.BlackoutRedactions">
            <summary>
            Gets or sets a boolean indicating whether to permanently scrub redacted
            data from the exported pages (true), or merely to indicate that redactions
            exist if the <c>IncludeAnnotations</c> property is true (false).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.RedactionCharacter">
            <summary>
            Gets or sets the replacement character for redacted text.
            </summary>
            <remarks>
            This property is ignored when exporting PDFs.  It only applies when pages
            as as plain text files.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.CropRectangle">
            <summary>
            Gets or sets the cropping lfRect.  The area of the image outside the
            specified lfRect will not be exported.
            </summary>
            <remarks>
            This property is ignored when exporting PDFs.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.RotationAngle">
            <summary>
            Gets or sets the clockwise rotation angle of the exported images in
            hundredths of a degree.
            </summary>
            <remarks>
            This property is ignored when exporting PDFs.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.ScaleFactor">
            <summary>
            Gets or sets the linear scale factor as a percentage in hundredths of
            a percent.
            </summary>
            <remarks>
            A value of 10000 is 100%, or no scaling.  A value
            of 5000 would be 50% which is half the width and half the height.
            This property is ignored when exporting PDFs.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.Watermarks">
            <summary>
            Gets or sets a list of <c>WatermarkSpecification</c> instances which
            specify which watermarks to apply to exported pages.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.ExtraAnnotations">
            <summary>
            Gets or sets a list of extra <c>AnnotationBase</c> which will be rendered 
            along with any annotations stored in a Laserfiche repository.
            </summary>
            <remarks>
            Annotations added to this list will not be saved in the Laserfiche document.
            Each annotation must have the entryId and pageId set; however,
            AnnotationBase.Session can be null because the annotation
            will never be saved.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentExporter.WatermarkIntensity">
            <summary>
            Gets or sets the intensity of any watermarks on the document. Ranges from 0 
            (pure white, basically invisible) to 100 (pure black, overwriting everything 
            else). Defaults to 20.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.#ctor">
            <summary>
            Initializes a <c>DocumentExporter</c> instance.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportThumbnail(Laserfiche.RepositoryAccess.IDocumentContents,System.Int32,System.String)">
            <summary>
            Export an image thumbnail for the specified page.  The thumbnail will be
            in the image format specified by the <c>PageFormat</c> property.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the document
            containing the page to export.</param>
            <param name="pageNumber">The page number of the page to export an image
            thumbnail of.</param>
            <param name="outputPath">The path to the image thumbnail file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportThumbnail(Laserfiche.RepositoryAccess.IDocumentContents,System.Int32,System.IO.Stream)">
            <summary>
            Export an image thumbnail for the specified page.  The thumbnail will be
            in the image format specified by the <c>PageFormat</c> property.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the document
            containing the page to export.</param>
            <param name="pageNumber">The page number of the page to export an image
            thumbnail of.</param>
            <param name="outputStream">A <c>Stream</c> where the image thumbnail will be
            written to.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportThumbnails(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,System.String)">
            <summary>
            Export an image thumbnail for the specified set of pages.  The thumbnails
            will be in the image format specified by the <c>PageFormat</c> property.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the document
            containing the page(s) to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying one or more pages
            to export image thumbnails for.</param>
            <param name="outputPath">The path to the image thumbnail file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportThumbnails(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,System.IO.Stream)">
            <summary>
            Export an image thumbnail for the specified set of pages.  The thumbnails
            will be in the image format specified by the <c>PageFormat</c> property.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the document
            containing the page(s) to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying one or more pages
            to export image thumbnails for.</param>
            <param name="outputStream">The path to the image thumbnail file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPages(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,System.String)">
            <summary>
            Exports the specified pages in the specified document to a file.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document whose pages will be exported.</param>
            <param name="pages">A <c>PageSet</c> instance specifying which pages
            in the document to export.</param>
            <param name="outputPath">The path to the output file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPages(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,System.IO.Stream)">
            <summary>
            Exports the specified pages in the specified document to the specified
            destination stream.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document whose pages will be exported.</param>
            <param name="pages">A <c>PageSet</c> instance specifying which pages
            in the document to export.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the
            destination stream where the exported data will be written to.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPage(Laserfiche.RepositoryAccess.IDocumentContents,System.Int32,System.String)">
            <summary>
            Exports the specified page in the specified document to a file.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document whose pages will be exported.</param>
            <param name="pageNumber">The page number of the page in the specified
            document to export.</param>
            <param name="outputPath">The path to the output file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPage(Laserfiche.RepositoryAccess.IDocumentContents,System.Int32,System.IO.Stream)">
            <summary>
            Exports the specified page in the specified document to a file.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document whose pages will be exported.</param>
            <param name="pageNumber">The page number of the page in the specified
            document to export.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the
            destination stream where the exported data will be written to.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPageAsBitmap(Laserfiche.RepositoryAccess.IDocumentContents,System.Int32)">
            <summary>
            Exports the specified page in the specified document as a bitmap in memory, without compression.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document whose pages will be exported.</param>
            <param name="pageNumber">The page number of the page in the specified
            document to export.</param>
            <returns>A new <c>LfiWriteableBitmap</c> instance containing the 
            page's image content as a bitmap, formatted according to applicable export settings
            and annotations.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportElecDoc(Laserfiche.RepositoryAccess.IDocumentContents,System.String)">
            <summary>
            Exports the specified electronic document to a file.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            electronic document to export.</param>
            <param name="outputPath">The path to the output file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportElecDoc(Laserfiche.RepositoryAccess.IDocumentContents,System.IO.Stream)">
            <summary>
            Exports the specified electronic document to a <c>Stream</c>.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            electronic document to export.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the
            destination stream where the exported data will be written to.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,System.String)">
            <summary>
            Exports a document as a PDF (Portable Document Format), writing the output
            to a file.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="outputPath">The path to the output file.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,System.IO.Stream)">
            <summary>
            Exports a document as a PDF (Portable Document Format), writing the output
            to a <c>Stream</c>.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the output
            stream.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,Laserfiche.DocumentServices.LfEmbeddedFontCollection,System.String)">
            <summary>
            Exports a document as a PDF (Portable Document Format), writing the output
            to a file.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="fonts">A collection of fonts to embed in the PDF.</param>
            <param name="outputPath">The path to the output file.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,Laserfiche.DocumentServices.LfEmbeddedFontCollection,System.IO.Stream)">
            <summary>
            Exports a document as a PDF (Portable Document Format), writing the output
            to a <c>Stream</c>.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="fonts">A collection of fonts to embed in the PDF.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the output
            stream.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportEncryptedPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,System.String,Laserfiche.DocumentServices.PdfEncryption,System.String)">
            <summary>
            Exports a document as a PDF (Portable Document Format) file with encryption.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="password">The password to encrypt the PDF with.</param>
            <param name="cryptAlg">A member of the <c>PdfEncryption</c> enumeration
            specifying the encryption algorithm to use.</param>
            <param name="outputPath">The path to the output file.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportEncryptedPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,System.String,Laserfiche.DocumentServices.PdfEncryption,System.IO.Stream)">
            <summary>
            Exports a document as a PDF (Portable Document Format) stream with encryption.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="password">The password to encrypt the PDF with.</param>
            <param name="cryptAlg">A member of the <c>PdfEncryption</c> enumeration
            specifying the encryption algorithm to use.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the output
            stream.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportEncryptedPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,Laserfiche.DocumentServices.LfEmbeddedFontCollection,System.String,System.String,Laserfiche.DocumentServices.PdfEncryption,System.String)">
            <summary>
            Exports a document as a PDF (Portable Document Format) file with encryption.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="fonts">A collection of fonts to embed in the PDF.</param>
            <param name="userPassword">The user password to use when encrypting the
            PDF.</param>
            <param name="ownerPassword">The owner password to use when encrypting the
            PDF.</param>
            <param name="cryptAlg">A member of the <c>PdfEncryption</c> enumeration
            specifying the encryption algorithm to use.</param>
            <param name="outputPath">The path to the output file.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ExportEncryptedPdf(Laserfiche.RepositoryAccess.IDocumentContents,Laserfiche.RepositoryAccess.PageSet,Laserfiche.DocumentServices.PdfExportOptions,Laserfiche.DocumentServices.LfEmbeddedFontCollection,System.String,System.String,Laserfiche.DocumentServices.PdfEncryption,System.IO.Stream)">
            <summary>
            Exports a document as a PDF (Portable Document Format) stream with encryption.
            </summary>
            <param name="document">A <c>IDocumentContents</c> instance representing the
            document to export.</param>
            <param name="pages">A <c>PageSet</c> instance specifying the pages in
            the document to export.</param>
            <param name="options">One or more values from the <c>PdfExportOptions</c>
            enumeration specifying the options to use when exporting the document.</param>
            <param name="fonts">A collection of fonts to embed in the PDF.</param>
            <param name="userPassword">The user password to use when encrypting the
            PDF.</param>
            <param name="ownerPassword">The owner password to use when encrypting the
            PDF.</param>
            <param name="cryptAlg">A member of the <c>PdfEncryption</c> enumeration
            specifying the encryption algorithm to use.</param>
            <param name="outputStream">A <c>Stream</c> instance representing the output
            stream.</param>
            <remarks>
            The electronic document portion of the specified document, if it exists, is
            not converted to PDF pages.  The pages of the Laserfiche document will become the pages
            of the PDF, and the document must have at least one page.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.AddSearchHitHighlights(Laserfiche.RepositoryAccess.SearchHitHighlightReader,Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Adds search hit highlights to the exported document.
            </summary>
            <param name="searchHits">The search hits to be applied. Each search hit will be applied 
            to the corresponding page number.</param>
            <param name="color">The color of the highlight.</param>
            <remarks>The highlight hits will be converted into new items in the 
            <see cref="P:Laserfiche.DocumentServices.DocumentExporter.ExtraAnnotations"/> property of this DocumentExporter.</remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.SetImageDecompositionHelper(Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionHelper)">
            <summary>
            Specifies an image processing engine capable of decomposing a single page document image
            into a composition of multiple images with the same appearance as the original page, for 
            the purpose of enhancing PDF compression.
            </summary>
            <param name="helper">
            A concrete implementation of PDF Image Decomposition Helper.
            </param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.AppendExtraAnnotation(Laserfiche.RepositoryAccess.IPageContents,System.Collections.Generic.List{Laserfiche.RepositoryAccess.AnnotationBase})">
            <summary>
            If user specifies extra annotations in DocumentExporter (such as search highlights,
            which are not stored in Laserfiche repository), PageImage class should call this method
            to include these extra annotations in its rendering.
            </summary>
            <param name="whichPage">Specifies extra annotations for a given page. The EntryId and 
            PageId properties will be used for matching.</param>
            <param name="anns">List of annotations for that page. The extra annotations will be 
            appended to the caller's List.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.ReadBufferImage(Laserfiche.DocumentServices.IImageSource)">
            <summary>
            Makes a local copy of the image stream, and verifies its 
            <c>LaserficheReadStream</c> checksum if applicable.
            </summary>
            <param name="page">The page content that provides the source stream. 
            It could be the page image or the thumbnail.</param>
            <returns></returns>
            <remarks>To get the computed checksum from a LaserficheReadStream, 
            it must be closed. Therefore, it is always necessary to create a 
            local copy of the stream. See <c>GetBufferStream</c>.</remarks>
            <exception cref="T:Laserfiche.RepositoryAccess.LaserficheRepositoryException"></exception>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.GetBufferStream(System.IO.Stream,System.Int64,System.String@)">
            <summary>
            <para>
            Locally create a complete copy of the data from the given stream.
            </para>
            <para>
            This method is used to improve reliability of a networked source stream,
            such as a LaserficheReadStream.
            </para>
            </summary>
            <param name="src">Stream containing input data.</param>
            <param name="length">If positive, this function will decide whether to 
            copy the data into a MemoryStream or a FileStream based on this data 
            length. </param>
            <param name="filePath">If specified, the data will be saved in that file, 
            and the caller will take responsibility of that file. If not specified, 
            this function is allowed to create a temporary file that is automatically 
            deleted on close.</param>
            <returns>The local copy of the data as a new stream, which could be a  
            <c>FileStream</c> or a <c>MemoryStream</c></returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentExporter.OnChecksumMismatch(System.IO.Stream,Laserfiche.DocumentServices.ChecksumMismatchEventArgs)">
            <summary>
            Calls the checksum mismatch handler registered by the user.
            </summary>
            <exception cref="T:Laserfiche.RepositoryAccess.LaserficheRepositoryException">If the user indicates that 
            processing should be stopped.</exception>
        </member>
        <member name="T:Laserfiche.DocumentServices.DocumentImporterOcrOptions">
            <summary>
            Represents the options that <c>DocumentImporter</c> will use when
            performing OCR of page images during import.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporterOcrOptions.AutoOrient">
            <summary>
            Gets or sets a boolean indicating whether to automatically determine the
            proper orientation of the image.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporterOcrOptions.Decolumnize">
            <summary>
            Gets or sets a boolean indicating whether to decolumnize the image before
            OCR.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporterOcrOptions.OptimizationMode">
            <summary>
            Gets or sets an enumeration indicating the OCR engine's optimization mode,
            i.e., should it favor greater speed at the cost of some accuracy.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporterOcrOptions.Language">
            <summary>
            Gets or sets the natural language the document to OCR is written in.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporterOcrOptions.#ctor">
            <summary>
            Initialize a new instance of <c>DocumentImporterOcrOptions</c>.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PageImportedEventArgs">
            <summary>
            Represents information about a page import event raised by <c>DocumentImporter</c>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageImportedEventArgs.PageNumber">
            <summary>
            Gets the page number of the page that is being processed.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageImportedEventArgs.LastPage">
            <summary>
            Gets the highest page number that will be processed.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.PageImportedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a <c>PageImportedEventArgs</c> instance.
            </summary>
            <param name="pageNumber">The current page number.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.DocumentImporter">
            <summary>
            Implements methods for importing data into an existing document in a Laserfiche
            repository.
            </summary>
            <remarks>
            <c>DocumentImporter</c> methods do not lock the document before importing data
            into the document.  The caller should always lock the destination document using
            the EntryInfo.Lock method before using <c>DocumentImporter</c> to import data
            into the document.
            
            Events are fired when importing pages, in the following order for each page:
            ImportingPageEvent, OcringPageEvent (only if OCR is enabled),
            OcrPageFailedEvent (only if the OCR failed), OcredPageEvent (only if OCR succeeded),
            ImportedPageEvent.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.Document">
            <summary>
            Gets or sets the <c>DocumentInfo</c> instance which represents the document
            to import data into.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.PagePosition">
            <summary>
            Gets or sets the page number to begin importing new pages at.
            Page -1 is at the end of the document, and page 1 is at the beginning.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.RecompressImages">
            <summary>
            Option to recompress images into JPEG (lossy) whenever possible 
            to reduce file size. When enabled, the JPEG quality setting 
            will be taken from <see cref="P:Laserfiche.DocumentServices.DocumentImporter.JpegQualityLevel"/>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.JpegQualityLevel">
            <summary>
            Gets or sets the JPEG quality used when compressing JPEG images.  Level 0 is
            the highest compression, and 100 is the highest quality.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.OcrImages">
            <summary>
            Gets or sets a boolean indicating whether to OCR images being imported.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.OcrOptions">
            <summary>
            Gets the <c>DocumentImporterOcrOptions</c> instance which contains the
            settings used when OCR'ing page images.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.ExtractTextFromEdoc">
            <summary>
            Gets or sets a boolean indicating if text should be extracted from
            electronic documents as they are imported and saved as text pages
            in the document.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.OverwritePages">
            <summary>
            Gets or sets a boolean indicating whether existing pages should be
            overwritten or that new pages should always be created.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.TextLinesPerPage">
            <summary>
            Gets or sets the maximum number of text lines per page.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.DocumentImporter.CharactersPerLine">
            <summary>
            Gets or sets the maximum number of characters to put in a line of text.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportEdoc(System.String,System.String)">
            <summary>
            Imports an electronic document file into the current Laserfiche document,
            replacing any existing electronic document.
            </summary>
            <param name="contentType">The MIME type of the electronic file to import.</param>
            <param name="edocPath">The path in the file system to the electronic file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportEdoc(System.String,System.IO.Stream)">
            <summary>
            Imports data from a stream into the current Laserfiche document as an
            electronic document, replacing any existing electronic document.
            </summary>
            <param name="contentType">The MIME type of the electronic file to import.</param>
            <param name="edocStream">A <c>Stream</c> representing the contents of the electronic file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportImages(System.String)">
            <summary>
            Import all the images contained in the specified image file into the
            currently selected document.
            </summary>
            <param name="imagePath">The path to the image file to import.</param>
            <returns>The number of images imported.</returns>
            <remarks>
            If the image file contains multiple pages, then all of the pages will
            be imported in the order they appear in the file, with one page created
            in the document per image in the file.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportImages(System.IO.Stream)">
            <summary>
            Import all the images contained in the specified input stream into the
            currently selected document.
            </summary>
            <param name="imageStream">A <c>Stream</c> representing data in a supported
            image format.</param>
            <returns>The number of images imported.</returns>
            <remarks>
            If the image data contains multiple pages, then all of the pages will
            be imported in the order they appear in the file, with one page created
            in the document per image in the stream.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportImages(System.String,Laserfiche.RepositoryAccess.PageRange)">
            <summary>
            Import the specified range of images contained in the specified
            image file into the currently selected document.
            </summary>
            <param name="imagePath">The path to the image file to import.</param>
            <param name="pagesToImport">A <c>PageRange</c> instance specifying
            which pages in the image file to import.</param>
            <returns>The number of images imported.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportImages(System.IO.Stream,Laserfiche.RepositoryAccess.PageRange)">
            <summary>
            Import the specified range of images contained in the specified input
            stream into the currently selected document.
            </summary>
            <param name="imageStream">A <c>Stream</c> representing data in a supported
            image format.</param>
            <param name="pagesToImport">A <c>PageRange</c> instance specifying
            which pages in the image file to import.</param>
            <returns>The number of images imported.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportText(System.String)">
            <summary>
            Import a text file, breaking it up into pages with the specified
            number of lines.  The encoding will be automatically detected.
            </summary>
            <param name="textPath">The path to the text file to import.</param>
            <returns>The number of pages written.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportText(System.String,System.Text.Encoding)">
            <summary>
            Import a text file, breaking it up into pages with the specified
            number of lines.
            </summary>
            <param name="textPath">The path to the text file to import.</param>
            <param name="encoding">An <c>Encoding</c> instance which specifies the
            text encoding.</param>
            <returns>The number of pages written.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportText(System.IO.Stream)">
            <summary>
            Import a text stream, breaking it up into pages with the specified
            number of lines.  The encoding will be automatically detected.
            </summary>
            <param name="textStream">A <c>Stream</c> containing the text to
            import.</param>
            <returns>The number of pages written.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.ImportText(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Import a text stream, breaking it up into pages with the specified
            number of lines.
            </summary>
            <param name="textStream">A <c>Stream</c> containing the text to
            import.</param>
            <param name="encoding">An <c>Encoding</c> instance which specifies the
            text encoding.</param>
            <returns>The number of pages written.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.DocumentImporter.CancelImport">
            <summary>
            Signals that the import process should be canceled.  Should only be called
            from an event handler callback.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImageExporter.CurrentDispatcherOrNull">
            <summary>
            <value>
            Returns the <see cref="T:System.Windows.Threading.Dispatcher"/> associated with 
            the current thread, or null if one has not yet been created.
            </value>
            <para>
            NOTE: Calling this method from different threads will yield different results.
            </para>
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.ImportOperation">
            <summary>
            Represents an <c>ImportEngine</c> import operation running asynchronously.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.Id">
            <summary>
            Gets the unique ID assigned to the represented import operation.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.OperationBegan">
            <summary>
            Gets the date and time the operation begin, in local time.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.ElapsedTime">
            <summary>
            Gets the amount of time that has elapsed since the operatio began.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.PercentComplete">
            <summary>
            Gets the percent of work that has been completed.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.AllLoggedExceptions">
            <summary>
            Gets a redactions of all logged <c>ImportEngineException</c> instances.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.IsCompleted">
            <summary>
            Gets a boolean indicating if the import operation has completed (successfully or not).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.HasFailed">
            <summary>
            Gets a boolean indicating if the import operation has failed.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.FailureReason">
            <summary>
            Gets an <c>Exception</c> object which contains information about why
            the import operation failed.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.Session">
            <summary>
            Gets the current Laserfiche <c>Session</c> instance.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportOperation.Phase">
            <summary>
            Gets a member of the <c>ImportEnginePhase</c> enumeration which indicates
            which phase the importing operation is currently in.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportOperation.Refresh">
            <summary>
            Refreshes the status of the import operation from Laserfiche.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.ImportEnginePhase">
            <summary>
            Enumeration of processing phases the <c>ImportEngine</c> moves through during
            an import operation.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.NotStarted">
            <summary>
            The import process has not yet started.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Validating">
            <summary>
            The <c>ImportEngine</c> command file is being validated against the <c>ImportEngine</c> schema.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Preparing">
            <summary>
            An import has started and initial preparation is occurring.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Parsing">
            <summary>
            The <c>ImportEngine</c> command file is being parsed.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Compressing">
            <summary>
            Data is being compressed before being sent to Laserfiche.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Importing">
            <summary>
            Laserfiche is importing the data into the current repository.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.CleaningUp">
            <summary>
            Temporary data is being cleaned up.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Completed">
            <summary>
            The import process has completed successfully.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.ImportEnginePhase.Failed">
            <summary>
            The import process has completed with errors.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.ImportEngine">
            <summary>
            Processes Laserfiche Import Engine command files.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportEngine.Session">
            <summary>
            Gets the <c>Session</c> instance associated with the current instance.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportEngine.IgnoreErrorAndContinue">
            <summary>
            Gets or sets the flag to control whether throw an exception to user or just log
            the error during parsing xml data in ImportEngine.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportEngine.RootPath">
            <summary>
            Gets or sets the repository path to the root folder to import data into in
            the repository.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ImportEngine.VolumeName">
            <summary>
            Gets or sets the name of the Laserfiche volume to import documents in to.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngine.#ctor(Laserfiche.RepositoryAccess.Session)">
            <summary>
            Initializes an instance of the <c>ImportEngine</c> class.
            </summary>
            <param name="session">The Laserfiche session to use.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngine.BeginProcess(System.String)">
            <summary>
            Begins processesing an Import Engine command file in the background.
            The data specified in the command file is imported into the current
            Laserfiche repository.
            </summary>
            <param name="filePath">The path to the command file in the file system.</param>
            <returns>An <c>ImportOperation</c> instance which represents the
            import operation as it runs asynchronously.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngine.BeginProcess(System.IO.Stream)">
            <summary>
            Begins processesing an Import Engine command file from a <c>Stream</c> instance.
            The data specified in the command file is imported into the current Laserfiche
            repository.
            </summary>
            <param name="input">A <c>Stream</c> instance representing the data stream
            whose contents contain a Import Engine command file.</param>
            <returns>An <c>ImportOperation</c> instance which represents the
            import operation as it runs asynchronously.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngine.Process(System.String)">
            <summary>
            Processes an Import Engine command file.  The data specified in the command
            file is imported into the current Laserfiche repository.
            </summary>
            <param name="filePath">The path to the command file in the file system.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngine.Process(System.IO.Stream)">
            <summary>
            Processes an Import Engine command file from a <c>Stream</c> instance.  The data
            specified in the command file is imported into the current Laserfiche repository.
            </summary>
            <param name="input">A <c>Stream</c> instance representing the data stream
            whose contents contain a Import Engine command file.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngine.GetAllLoggedExceptions">
            <summary>
            Returns a redactions of all logged <c>ImportEngineException</c> exceptions.
            </summary>
            <returns>A redactions of all logged <c>ImportEngineException</c> exceptions.</returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.IImageSource.Watermarks">
            <summary>
            tokens in watermark will not be substituted, user must make sure the token has been processed before
            calling the method
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.ImportEngineException">
            <summary>
            Represents an error encountered by <c>ImportEngine</c>.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngineException.#ctor">
            <summary>
            Initializes a new instance of the ImportEngineException class.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ImportEngineException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.ImportEngineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ImportEngineException class with a specified message
            and inner exception reference.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.LfEmbeddedFontCollection">
            <summary>
            A collection of fonts that will be embedded in a PDF document.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.LfEmbeddedFontCollection.GetDefault">
            <summary>
            Retrieves an <c>LfEmbeddedFontCollection</c> instance containing the default
            selection of fonts.
            </summary>
            <returns>An <c>LfEmbeddedFontCollection</c> instance containing the default
            selection of fonts.</returns>
            <remarks>
            A new <c>LfEmbeddedFontCollection</c> instance is returned each time the
            method is called, containing the regular forms of Times New Roman, Arial,
            Arial Unicode MS, SimSun and SimHei fonts, if they exist on the computer.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.LfEmbeddedFontCollection.AddOpenTypeFont(System.String,System.Single)">
            <summary>
            Adds an OpenType font file to the collection.
            </summary>
            <param name="ttcPath">The path to the OpenType font file to add.</param>
            <param name="size">The size of the font or fonts, in points.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.LfEmbeddedFontCollection.AddFont(System.String,System.Single)">
            <summary>
            Adds a named font to the collection.
            </summary>
            <param name="name">The name of the base font to add.</param>
            <param name="size">The size of the font, in points</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.OcrPageEventArgs">
            <summary>
            Represents information about a page OCR event.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrPageEventArgs.Document">
            <summary>
            Gets a <c>DocumentInfo</c> instance which represents the document
            that is being processed.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrPageEventArgs.PageNumber">
            <summary>
            Gets the page number of the page that is being processed.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrPageEventArgs.#ctor(Laserfiche.RepositoryAccess.DocumentInfo,System.Int32)">
            <summary>
            Initializes an <c>OcrPageEventArgs</c> instance.
            </summary>
            <param name="info">A <c>DocumentInfo</c> instance which represents
            the document being processed.</param>
            <param name="pageNumber">The page number of the page being processed.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.OcrOptimizationMode">
            <summary>
            Enumeration of OCR engine optimization modes.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.OcrOptimizationMode.Balanced">
            <summary>
            Choose a balance between OCR speed and accuracy.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.OcrOptimizationMode.Speed">
            <summary>
            Favor OCR speed over accuracy.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.OcrOptimizationMode.Accuracy">
            <summary>
            Favor OCR accuracy over speed.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.OcrEngineRegistration">
            <summary>
            Information about an OCR engine registered for use with Laserfiche.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrEngineRegistration.Name">
            <summary>
            Gets the friendly name of the OCR engine.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrEngineRegistration.ProgId">
            <summary>
            Gets the ProgID of the OCR engine, which is used to load the engine.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.OcrEngine">
            <summary>
            Provides the ability to OCR documents stored in a Laserfiche repository.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrEngine.AutoOrient">
            <summary>
            Gets or sets a boolean indicating whether to automatically determine the
            orientation of the image.
            </summary>
            <remarks>
            If the value of this property is false, OCR may not succeed unless the image
            has been rotated so that the text is upright.  Setting this property to false
            may increase performance.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrEngine.Decolumnize">
            <summary>
            Gets or sets a boolean indicating whether to decolumnize the text.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrEngine.OptimizationMode">
            <summary>
            Gets or sets an enumeration indicating the OCR engine's optimization mode,
            i.e., should it favor greater speed at the cost of some accuracy.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OcrEngine.Language">
            <summary>
            Gets or sets the natural language the document to OCR is written in.
            </summary>
        </member>
        <member name="E:Laserfiche.DocumentServices.OcrEngine.OcrPageEvent">
            <summary>
            The event that is triggered each time a document page is processed.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.IsOcrEngineAvailable(System.String)">
            <summary>
            Checks whether the specified OCR engine is available.
            </summary>
            <param name="progId">The ProgID of the OCR engine to check for
            availability.</param>
            <returns>True if the specified OCR engine is available.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.IsOcrEngineAvailable">
            <summary>
            Checks whether the default OCR engine is available.
            </summary>
            <returns>True if the default OCR engine is available.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.LoadEngine(System.String)">
            <summary>
            Loads the specified OCR engine and returns an <c>OcrEngine</c> instance
            representing the specified OCR engine which can be used to OCR documents.
            </summary>
            <param name="progID">The ProgID of the OCR engine to load.</param>
            <returns>An <c>OcrEngine</c> instance representing the specified OCR engine
            which can be used to OCR documents</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.LoadEngine(Laserfiche.DocumentServices.OcrEngineRegistration)">
            <summary>
            Loads the specified OCR engine and returns an <c>OcrEngine</c> instance
            representing the specified OCR engine which can be used to OCR documents.
            </summary>
            <param name="registration">An <c>OcrEngineRegistration</c> instance that
            describes the OCR engine to load.</param>
            <returns>An <c>OcrEngine</c> instance representing the specified OCR engine
            which can be used to OCR documents.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.LoadEngine">
            <summary>
            Loads the default OCR engine and returns an <c>OcrEngine</c> instance
            representing the default OCR engine which can be used to OCR documents.
            </summary>
            <returns>An <c>OcrEngine</c> instance representing the default OCR engine
            which can be used to OCR documents.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.GetEngines">
            <summary>
            Returns a list of available OCR engines.
            </summary>
            <returns>A list of available OCR engines.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.Cancel">
            <summary>
            Attempts to cancel the currently running OCR process.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.GetSupportedLanguages">
            <summary>
            Returns an array of strings containing the names of all the natural
            languages the represented OCR engine supports.
            </summary>
            <returns>An array of strings containing the names of all the natural
            languages the represented OCR engine supports.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.Run(Laserfiche.RepositoryAccess.DocumentInfo)">
            <summary>
            Runs an OCR process to generate text and word locations for all of
            the image pages in the specified document.  All changes are immediately
            saved to the repository.
            </summary>
            <param name="document">A <c>DocumentInfo</c> instance representing the
            document to OCR.</param>
            <remarks>
            Any existing text and OCR word locations data for the pages in the document
            will be overwritten.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.Run(Laserfiche.RepositoryAccess.DocumentInfo,Laserfiche.RepositoryAccess.PageSet)">
            <summary>
            Runs an OCR process to generate text and word locations for the specified
            set of pages.  All changes are immediately saved to the repository.
            </summary>
            <param name="document">A <c>DocumentInfo</c> instance representing the
            document to OCR.</param>
            <param name="pages">A <c>PageSet</c> instance representing the pages
            to OCR.</param>
            <remarks>
            Any existing text and OCR word locations data for the pages in the document
            will be overwritten.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.OcrEngine.Close">
            <summary>
            Shuts down the OCR engine and frees all allocated resources.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfExporter.ConfigureImageRenderedAnnotations(Laserfiche.RepositoryAccess.IPageContents)">
            <summary>
            <para>
            Returns the list of annotations which will be rendered as part of the image
            (also known as "burn-in" annotations).
            </para>
            <para>
            This method is controlled by these properties: 
            IncludeAnnotations, BlackoutRedactions, Options(PdfExportOptions.RenderAnnotationsAsImage),
            </para>
            <para>
            Depending on the property flags, the returned annotations will include
            page annotations (PageInfo.GetAnnotations()), DocumentExporter annotation filtering,
            and DocumentExporter extra annotations.
            </para>
            <para>
            (Remark.) When burn-in annotations are applied on 1bpp bitonal (BW) images,
            it will promote the images to 24bpp color. See <code>NeedTruecolor</code> method.
            </para>
            </summary>
            <param name="pageInfo">The page on which to apply image-rendered annotations.</param>
            <returns></returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfExporter.GetPdfPageImageDecomposed(Laserfiche.RepositoryAccess.IPageContents)">
            <summary>
            Performs image decomposition.
            </summary>
            <param name="pageInfo"></param>
            <returns>
            Result of image decomposition, or null if the page cannot be exported.
            </returns>
        </member>
        <member name="T:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportOptions">
            <summary>
            Configurable options for batched async image decomposition.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportOptions.MaxImagedPagesPerBatch">
            <summary>
            Setting this to a value greater than one allows (but does not force)
            PdfExporter to prepare more than one page image at a time.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportOptions.MaxPagesPerBatch">
            <summary>
            Setting this to a value greater than one allows (but does not force)
            PdfExporter to read ahead the page information.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportOptions.MaxPixelsPerBatch">
            <summary>
            Allows PdfExporter to keep preparing page images until the total number
            of pixels of images in-progress reaches this limit.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData">
            <summary>
            A struct for a page being exported (with an image decomposition being
            in progress on a different thread).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.PageInfo">
            <summary>
            Page information.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.PageBitmap">
            <summary>
            The page image, or null if the page does not have an image.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.HasImage">
            <summary>
            True if the page has an image.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.DecompositionTask">
            <summary>
            <para>Gets the asynchronous image decomposition task.</para>
            <para>Returns null if the page does not have an image.</para>
            <para>This property can be read without blocking.</para>
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.GetDecompositionResult">
            <summary>
            <para>Gets the decomposition result.</para>
            </summary>
            <returns>
            The image decomposition result, or null if the page does not have an image.
            </returns>
            <remarks>
            This method blocks until the result is ready.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.#ctor(Laserfiche.RepositoryAccess.IPageContents,Laserfiche.Imaging.LfiWriteableBitmap,System.Threading.Tasks.Task{Laserfiche.DocumentServices.Interfaces.IPdfImageDecompositionResult})">
            <summary>
            Creates a struct for a page being exported (with an image decomposition being processed asynchronously).
            </summary>
            <param name="pageInfo"></param>
            <param name="pageBitmap">The page image, or null if the page does not have an image.</param>
            <param name="decompTask">Asynchronous image decomposition task, or null if the page does not have an image.</param>
            <remarks>
            The Page Bitmap and the DecompositionTask will be disposed.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.PdfExporter.Internals.AsyncExportedPageData.Dispose">
            <summary>
            Dispose method. If PageBitmap and DecompositionTask are not null, they will be disposed.
            Do not call this method until all code that uses these objects have finished.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_ASSIGN_PSET">
            <summary>
              Looks up a localized string similar to Could not assign template to the entry..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_EXTRACT_TEXT">
            <summary>
              Looks up a localized string similar to Error to extract text from the document..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_GENERATE_PAGES">
            <summary>
              Looks up a localized string similar to Error to generate Laserfiche text pages..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_IMPORT_BRIEFCASE">
            <summary>
              Looks up a localized string similar to The briefcase &apos;{0}&apos; could not be imported into repository..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_MISSING_PSET">
            <summary>
              Looks up a localized string similar to The template must be defined in the XML or exist in the repository..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_NO_TEXT_EXTRACTOR">
            <summary>
              Looks up a localized string similar to Text extractor is not available..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_OCR_IMAGE">
            <summary>
              Looks up a localized string similar to Error to ocr image..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_PAGE_OVERWRITTEN">
            <summary>
              Looks up a localized string similar to All pages will be overwritten by extracted text..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_UNSUPPORTED_FILETYPE">
            <summary>
              Looks up a localized string similar to The file type is not supported to extract text..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_VALIDATION">
            <summary>
              Looks up a localized string similar to Validation failure. See logged exceptions for details..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMGENG_VALIDATION_DETAILS">
            <summary>
              Looks up a localized string similar to Validation failure on line {0} , position {1} :.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_APPLY_STAMP">
            <summary>
              Looks up a localized string similar to Could not apply stamp annotation..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_ASSIGN_FIELD">
            <summary>
              Looks up a localized string similar to Could not assign field to the entry..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_ASSIGN_TAG">
            <summary>
              Looks up a localized string similar to The tag could not be assigned to the document..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_CONVERT_ENCODING">
            <summary>
              Looks up a localized string similar to Error while converting text encoding..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_CONVERT_IMG">
            <summary>
              Looks up a localized string similar to Error to convert image format..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_EXFILE">
            <summary>
              Looks up a localized string similar to Could not import external file..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_INVALID_PSET_FIELD">
            <summary>
              Looks up a localized string similar to Invalid field in the template definition..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_MISSING_FIELD">
            <summary>
              Looks up a localized string similar to Field must be defined in the XML or exist in the repository..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_MISSING_RELATIONSHIP">
            <summary>
              Looks up a localized string similar to Relationship must be defined in the XML or exist in the repository..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_MISSING_STAMP">
            <summary>
              Looks up a localized string similar to Stamp must be defined in the XML or exist in the repository..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_MISSING_TAG">
            <summary>
              Looks up a localized string similar to The tag must be defined in the XML or exist in the repository..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_NO_OCR">
            <summary>
              Looks up a localized string similar to OCR engine is not available..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_READING_IMAGE">
            <summary>
              Looks up a localized string similar to Error to read image information..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_READING_LOC">
            <summary>
              Looks up a localized string similar to Error while reading location data..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_RELATION_NO_TARGET">
            <summary>
              Looks up a localized string similar to Link must target to an existing entry..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_RELATIONSHIP">
            <summary>
              Looks up a localized string similar to Could not create relationship on entries..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_SHORTCUT">
            <summary>
              Looks up a localized string similar to The shortcut must reference an existed entry..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_TEXT_OVERWRITTEN">
            <summary>
              Looks up a localized string similar to Text will be overwritten by OCRed text..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ERR_IMPENG_UNAUTH_TAG">
            <summary>
              Looks up a localized string similar to The secure tag must be assigned to the trustee before using on the entry..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.IDS_CHECKSUM_MISMATCH">
            <summary>
              Looks up a localized string similar to Checksum mismatch..
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.ImportEngineXsd">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;ImportEngineSchema&quot;
                       targetNamespace=&quot;http://laserfiche.com/namespaces/importengine&quot;
                       elementFormDefault=&quot;qualified&quot;
                       xmlns:lf=&quot;http://laserfiche.com/namespaces/importengine&quot;
                       xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; &gt;
            
              &lt;!-- Root element --&gt;
              &lt;xs:element name=&quot;importengine&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;
                    This is the top-level container element for every ImportEngine file.
               [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.Properties.Resources.srgb">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotMetadata">
            <summary>
            A collection of metadata to apply to Laserfiche documents that are
            generated by Laserfiche Snapshot.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotMetadata.TemplateName">
            <summary>
            Gets or sets the name of the template to assign to the document.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotMetadata.AddTag(System.String)">
            <summary>
            Adds a tag to the collection of tags to be applied to the document.
            </summary>
            <param name="tagName">The name of the tag to add to the collection.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotMetadata.SetFieldValues(Laserfiche.RepositoryAccess.FieldValueCollection)">
            <summary>
            Sets the Laserfiche field values that will be set on the document.
            </summary>
            <param name="fieldValues">The collection of field values to set on the
            document.</param>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotProfile">
            <summary>
            Represents a profile configured in Laserfiche Snapshot.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.Name">
            <summary>
            Gets the name of the profile.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.OutputDirectory">
            <summary>
            Gets the path to the default output directory when exporting the results of
            the print job to a local directory.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.Repository">
            <summary>
            Gets information about the repository to connect to.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.LaserficheFolderPath">
            <summary>
            Gets the default path in the Laserfiche repository to the parent folder
            where the document will be stored.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.DefaultDocumentName">
            <summary>
            Gets the default name of the document to import.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.LoginUserName">
            <summary>
            Gets the default user name to log in to Laserfiche.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotProfile.ProfileRegistry">
            <summary>
            Gets a member of the <c>SnapshotProfileEnumeration</c> indicating if the profile
            is a machine- or user-level profile.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotResult">
            <summary>
            Represents the results of a print job processed by Laserfiche Snapshot.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotResult.EntryId">
            <summary>
            Gets the entry ID of the document in Laserfiche containing the output
            of the print job.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotResult.OutputListFile">
            <summary>
            Gets the path to the list file when generating a list file for later import.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotResult.ErrorCode">
            <summary>
            Gets the error code, if an error occurred.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotResult.ErrorMessage">
            <summary>
            Gets the error message, if an error occurred.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotDriver">
            <summary>
            Provides the ability to pass data to Laserfiche Snapshot that will
            be used to control how the next print job Snapshot receives will
            be processed.
            </summary>
            <remarks>
            Using this class involves five steps: 1) attach to the Snapshot printer
            using the <c>AttachToPrinter</c> method; 2) call <c>PrepareBatch</c> with
            the settings that you would like Snapshot to use; 3) send your print job or
            jobs to the Snapshot printer; 4) call <c>WaitForJob</c> to wait for Snapshot
            to finish processing a print job (call this once per job); 5) call
            <c>CompleteBatch</c> to signal that you are done queuing print jobs.  Between
            calls to <c>PrepareBatch</c> and <c>CompleteBatch</c> you may queue multiple
            print jobs; call <c>WaitForJob</c> once for each job that is queued.
            Multiple rounds of <c>PrepareBatch</c> and <c>CompleteBatch</c> can be run
            after attaching to the Snapshot printer.
            
            Dispose of <c>SnapshotDriver</c> instances when they are no longer needed.
            The <c>CompleteBatch</c> method does not free all allocated resources.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriver.PrinterName">
            <summary>
            Gets the name of the printer that this instance is attached to.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotDriver.AttachToPrinter">
            <summary>
            Searches for a Laserfiche Snapshot virtual printer device and attaches to it.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotDriver.AttachToPrinter(System.String)">
            <summary>
            Attaches to the specified printer.
            </summary>
            <param name="printerName">The name of the Laserfiche Snapshot virtual
            printer device to attach to.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotDriver.PrepareBatch(Laserfiche.DocumentServices.SnapshotDriverSettings)">
            <summary>
            Readies Lasefiche Snapshot to receive print jobs to process using the
            specified settings.
            </summary>
            <param name="settings">An instance of <c>SnapshotDriverSettings</c>
            which specifies how Snapshot will process the print jobs that are
            sent to it.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotDriver.CompleteBatch">
            <summary>
            Frees resources that were allocated by the <c>PrepareBatch</c> method.
            Only call after all print jobs for Snapshot queued since <c>PrepareBatch</c>
            have completed successfully or have been canceled.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotDriver.WaitForJob(System.TimeSpan)">
            <summary>
            Waits for a print job to complete.  Must be called once for each successful
            print job queued to the Snapshot printer after <c>PrepareBatch</c> is called.
            </summary>
            <param name="timeout">The maximum amount of time to wait for the print job
            to complete and for Snapshot to process the results.</param>
            <returns>An instance of <c>SnapshotResult</c> that contains the results
            of the print job.</returns>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotDriverWorkMode">
            <summary>
            An enumeration of the different modes Laserfiche Snapshot should operate
            in when it processes a print job when being controlled by <c>SnapshotDriver</c>.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.SnapshotDriverWorkMode.UIAndRepository">
            <summary>
            Display the Snapshot dialog so the user can change settings.  Import
            the job output into a Laserfiche repository.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.SnapshotDriverWorkMode.UIAndDirectory">
            <summary>
            Display the Snapshot dialog so the user can change settings.  Store
            the job output in a local directory.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.SnapshotDriverWorkMode.BatchAndRepository">
            <summary>
            Do not display a Snapshot dialog.  Instead, directly import the job output
            into a Laserfiche repository.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.SnapshotDriverWorkMode.BatchAndDirectory">
            <summary>
            Do not display a Snapshot dialog.  Instead, directly store the job output
            output in a local directory.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotProfileLocation">
            <summary>
            An enumeration of registry hives where Laserfiche Snapshot profiles can be stored.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.SnapshotProfileLocation.CurrentUser">
            <summary>
            The profile is private to the current Windows user.
            </summary>
        </member>
        <member name="F:Laserfiche.DocumentServices.SnapshotProfileLocation.LocalMachine">
            <summary>
            The profile is visible to all users on the current machine.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.SnapshotDriverSettings">
            <summary>
            The settings to pass to Laserfiche Snapshot when it processes a print job
            while it is being controlled by <c>SnapshotDriver</c>.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.SnapshotDriverSettings.#ctor">
            <summary>
            Initializes a new instance of <c>SnapshotDriverSettings</c>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.Mode">
            <summary>
            Gets or sets the Snapshot work mode to use.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.DocumentName">
            <summary>
            Gets or sets the document name to use when importing into Laserfiche.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.FolderPath">
            <summary>
            Gets or sets the path to the parent folder of the document to import
            into Laserfiche.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.Metadata">
            <summary>
            Gets or sets an instance of <c>SnapshotMetadata</c> that specifies the
            metadata to set on the document being imported into Laserfiche.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.OutputDirectory">
            <summary>
            Gets or sets the path to the output directory when saving the contents
            of a print job to a local directory instead of importing them directly
            to Laserfiche.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.ProfileName">
            <summary>
            Gets or sets the name of the pre-defined Snapshot profile to load when
            processing the print job.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.SnapshotDriverSettings.ProfileLocation">
            <summary>
            Gets or sets an enumeration value specifying which registry hive to load
            the profile from.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.StampBitmapConverter">
            <summary>
            Provides methods to convert between bitmaps and Laserfiche stamp image data.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetStampImageData(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Returns a byte array containing Laserfiche stamp image data generated from
            the specified bitmap.
            </summary>
            <param name="source">The bitmap to convert to a stamp.  The bitmap is
            unmodified.</param>
            <returns>A byte array containing Laserfiche stamp image data generated from
            the specified bitmap.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetStampImageData(Laserfiche.Imaging.Core.LfBitmapSource)">
            <summary>
            Returns a byte array containing Laserfiche stamp image data generated from
            the specified bitmap.
            </summary>
            <param name="source">The bitmap to convert to a stamp.  The bitmap is
            unmodified.</param>
            <returns>A byte array containing Laserfiche stamp image data generated from
            the specified bitmap.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetBitmapFromStamp(Laserfiche.RepositoryAccess.StampInfo,Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Returns a bitmap from the provided Laserfiche stamp using the specified color.
            </summary>
            <param name="stamp">A <c>StampInfo</c> instance containing the stamp image data
            to convert.  The <c>StampInfo</c> instance is unmodified.</param>
            <param name="stampColor">The color the stamp will be rendered in.</param>
            <returns>A bitmap from the provided Laserfiche stamp using the specified color.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetCoreBitmapFromStamp(Laserfiche.RepositoryAccess.StampInfo,Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Returns a bitmap from the provided Laserfiche stamp using the specified color.
            </summary>
            <param name="stamp">A <c>StampInfo</c> instance containing the stamp image data
            to convert.  The <c>StampInfo</c> instance is unmodified.</param>
            <param name="stampColor">The color the stamp will be rendered in.</param>
            <returns>A bitmap from the provided Laserfiche stamp using the specified color.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetBitmapFromStamp(System.Byte[],Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Returns a bitmap from the provided Laserfiche stamp image data using the
            specified color.
            </summary>
            <param name="imageData">A byte array containing Laserfiche stamp image data.</param>
            <param name="stampColor">The color the stamp will be rendered in.</param>
            <returns>A bitmap from the provided Laserfiche stamp image data using the
            specified color.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetCoreBitmapFromStamp(System.Byte[],Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Returns a bitmap from the provided Laserfiche stamp image data using the
            specified color.
            </summary>
            <param name="imageData">A byte array containing Laserfiche stamp image data.</param>
            <param name="stampColor">The color the stamp will be rendered in.</param>
            <returns>A bitmap from the provided Laserfiche stamp image data using the
            specified color.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetBitmapFromStamp(System.Byte[],System.Int32,Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Returns a bitmap from the provided Laserfiche stamp image data using the
            specified color.
            </summary>
            <param name="imageData">A byte array containing Laserfiche stamp image data.</param>
            <param name="offset">The offset into the <paramref name="imageData"/> array where
            the stamp image data is stored.</param>
            <param name="stampColor">The color the stamp will be rendered in.</param>
            <returns>A bitmap from the provided Laserfiche stamp image data using the
            specified color.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.StampBitmapConverter.GetCoreBitmapFromStamp(System.Byte[],System.Int32,Laserfiche.RepositoryAccess.Common.LfColor)">
            <summary>
            Returns a bitmap from the provided Laserfiche stamp image data using the
            specified color.
            </summary>
            <param name="imageData">A byte array containing Laserfiche stamp image data.</param>
            <param name="offset">The offset into the <paramref name="imageData"/> array where
            the stamp image data is stored.</param>
            <param name="stampColor">The color the stamp will be rendered in.</param>
            <returns>A bitmap from the provided Laserfiche stamp image data using the
            specified color.</returns>
        </member>
        <member name="T:Laserfiche.DocumentServices.TextExtractor">
            <summary>
            Extract text from electronic documents stored in Laserfiche and imports
            the extracted text as pages in document.
            </summary>
            <remarks>
            Text is extracted from electronic documents using locally installed IFilter
            classes provided by third-party vendors.  Unlike the <c>TextExtractor</c> class
            in the DocumentProcessor library, this class does not use Automation to
            start applications to retrieve text and instead relies solely upon IFilter
            classes.  This means this class is generally safe to use from a server-side
            context for all types of documents.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.TextExtractor.IsExtractorAvailable">
            <summary>
            Returns true if the TextExtractor class is registered, or false if it's not.
            </summary>
            <returns>True if the TextExtractor class is registered, or false if it's not.</returns>
            <remarks>
            If this method returns false, text extraction will not function.  If this
            method returns true, text extraction may work, but errors could still
            occur at run-time.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.TextExtractor.LoadExtractor">
            <summary>
            Returns a new instance of <c>TextExtractor</c>.
            </summary>
            <returns>A new instance of <c>TextExtractor</c>.</returns>
        </member>
        <member name="P:Laserfiche.DocumentServices.TextExtractor.PagePosition">
            <summary>
            Gets or sets the page number where the import will start writing text to.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.TextExtractor.OverwriteText">
            <summary>
            Gets or sets a boolean indicating if existing text pages will be overwritten.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.TextExtractor.TextLinesPerPage">
            <summary>
            Gets or sets the number of lines to write per page before creating a new page.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.TextExtractor.CharactersPerLine">
            <summary>
            Gets or sets the maximum number of characters to write per line of text.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.TextExtractor.IsClosed">
            <summary>
            Gets a boolean indicating if this TextExtractor instance has been closed and
            is no longer usable.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.TextExtractor.GetSupportedExtensions">
            <summary>
            Returns a collection of <c>FileType</c> values indicating the types of
            files that the installed IFilter classes are registered to handle.
            </summary>
            <returns>A collection of <c>FileType</c> values indicating the types of
            files that the installed IFilter classes are registered to handle.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.TextExtractor.IsExtensionSupported(System.String)">
            <summary>
            Returns a boolean indicating if the file type, identified by file extension,
            is supported by an installed IFilter class.
            </summary>
            <param name="extension">The file extension to check.</param>
            <returns>A boolean indicating if the file type, identified by file extension,
            is supported by an installed IFilter class.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.TextExtractor.ExtractFrom(Laserfiche.RepositoryAccess.DocumentInfo)">
            <summary>
            Extracts text from the electronic document file stored in the specified
            Laserfiche document and stores the text back into the document as
            pages.
            </summary>
            <param name="document">A <c>DocumentInfo</c> instance specifying the
            Laserfiche document to extract text from and to import pages to.</param>
            <returns>True if text was extracted, false otherwise.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.TextExtractor.Close">
            <summary>
            Releases all resources that this instance of <c>TextExtractor</c> has allocated.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.CommonEntryProperties">
            <summary>
            Represents essential properties that are common to all Laserfiche entries.
            Used to specify entry properties for <c>VolumeMaker</c>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.CommonEntryProperties.Name">
            <summary>
            Gets or sets the name of the entry.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.CommonEntryProperties.CreationTimeUtc">
            <summary>
            Gets or sets the creation time of the entry in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.CommonEntryProperties.LastModifiedTimeUtc">
            <summary>
            Gets or sets the last modification time of the entry in Coordinated Universal
            Time (UTC).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.CommonEntryProperties.Creator">
            <summary>
            Gets or sets the security identifier (SID) of the user that created the
            entry.  Can be left as a null reference.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.CommonEntryProperties.Comment">
            <summary>
            Gets or sets the entry comment.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.CommonEntryProperties.Color">
            <summary>
            Gets or sets the color of the entry.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.OptionalEntryProperties">
            <summary>
            Represents optional properties that are common to all Laserfiche entries.
            Used to specify optional entry properties for <c>VolumeMaker</c>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalEntryProperties.Language">
            <summary>
            Gets or sets the RFC 5646 compliant language tag specifying the natural
            language the document is written in.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalEntryProperties.Fields">
            <summary>
            Gets or sets a <c>FieldValueCollection</c> instance which represents
            the collection of field values for the corresponding entry.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalEntryProperties.Template">
            <summary>
            Gets or sets the name of the template for the corresponding entry.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalEntryProperties.Tags">
            <summary>
            Gets or sets a collection of entry tags and their comments that will be
            applied to the corresponding entry.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.OptionalEntryProperties.#ctor">
            <summary>
            Initializes an <c>OptionalEntryProperties</c> instance.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.OptionalAnnotationProperties">
            <summary>
            Represents optional properties that are common to all Laserfiche annotations.
            Used to specify optional annotation properties for <c>VolumeMaker</c>.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalAnnotationProperties.Creator">
            <summary>
            Gets or sets the security identifier (SID) of the user that created the
            annotation.  Can be left as a null reference.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalAnnotationProperties.CreationTimeUtc">
            <summary>
            Gets or sets the creation time of the annotation in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.OptionalAnnotationProperties.LastModifiedTimeUtc">
            <summary>
            Gets or sets the last modification time of the annotation in Coordinated
            Universal Time (UTC).
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.PageAttributes">
            <summary>
            Represents the properties of a document page.  Used to specify page properties
            for <c>VolumeMaker</c>.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.PageAttributes.#ctor">
            <summary>
            Initializes a <c>PageAttributes</c> instance.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.Rotation">
            <summary>
            Gets or sets a value of the <c>PageRotation</c> enumeration specifying the
            rotation to apply to the image portion of the page.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.AnsiEncoding">
            <summary>
            Gets or sets a boolean indicating if the text file uses a
            non-Unicode (ANSI codepage) encoding.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.ImageWidth">
            <summary>
            Gets or sets the width of the page image in pixels.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.ImageHeight">
            <summary>
            Gets or sets with height of the page image in pixels.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.ImageXResolution">
            <summary>
            Gets or sets the horizontal resolution of the image, in dots per inch (DPI).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.ImageYResolution">
            <summary>
            Gets or sets the vertical resolution of the image, in dots per inch (DPI).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.ImageDepth">
            <summary>
            Gets or sets the image color depth, in bits per pixel.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.HasWordLocations">
            <summary>
            Gets or sets a boolean indicating if the page has OCR word locations data.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.HasText">
            <summary>
            Gets or sets a boolean indicating if the page has a text file portion.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.HasThumbnail">
            <summary>
            Gets or sets a boolean indicating if the page has an image thumbnail file portion.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.PageAttributes.HasImage">
            <summary>
            Gets or sets a boolean indicating if the page has an image file portion.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.ElecDocumentAttributes">
            <summary>
            Represents the properties of an electronic document.  Used to specify electronic
            document properties for <c>VolumeMaker</c>.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.ElecDocumentAttributes.#ctor">
            <summary>
            Initializes an <c>ElectronicDocAttributes</c> instance.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ElecDocumentAttributes.MimeType">
            <summary>
            Gets or sets the MIME type of the electronic document.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.ElecDocumentAttributes.Extension">
            <summary>
            Gets or sets the file extension of the electronic document.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.VolumeMaker">
            <summary>
            Provides the ability to create a volume that can be attached to a Laserfiche
            repository.
            </summary>
            <remarks>
            The <c>VolumeMaker</c> class is intended to ease bulk import into a Laserfiche
            repository of a large number of documents which are stored externally of an
            existing Laserfiche repository.  <c>VolumeMaker</c> allows the caller to create
            on disk a directory structure populated with data files that is identical to
            an exported Laserfiche volume.  The data files are supplied by the caller,
            and <c>VolumeMaker</c> takes care of creating the directory structure and for
            writing the XML files at the root of the volume directory which contain the
            volume's metadata and a record of the document structure.
            
            The caller must take care to ensure the data files are in the correct format
            for Laserfiche.  Electronic documents can be kept in their native formats,
            but files for document pages must follow certain conventions.  Page images
            should be TIFF Group IV files if the image is bitonal (i.e., 1-bit monochrome);
            and TIFF-LZW or standard JPEG if the image is 8-bit grayscale or 24-bit
            full color.  Laserfiche does not support 16-bit color images, or grayscale
            images with a bit depth greater than 8 bits per pixel.  Other images formats,
            such as PNG, GIF or Windows BMP are not recommended.  For TIFF images, ensure
            that the horizontal and vertical resolution is recorded properly in the TIFF
            header.
            
            Text files should be in Unicode, encoded as UTF-16 little-endian without any
            byte order mark (BOM) header.  Plain 7-bit ASCII text files are acceptable if
            the <c>AnsiEncoding</c> property of the corresponding <c>PageAttributes</c>
            instance is set to true.  Line endings should use the Windows text file standard
            of a carriage return followed by a newline control character.
            
            It is strongly recommended to rely upon the server to generate image thumbnail
            files on its own on demand, rather than importing pre-generated thumbnails.
            The thumbnail file format is not documented here.
            
            No connection is required to a Laserfiche repository to use <c>VolumeMaker</c>.
            Once the volume has been created it can be attached to a Laserfiche repository
            as any other exported volume.  The Laserfiche server requires direct access to
            the volume directory structure to attach a volume.  Making the directory structure
            accessible to Laserfiche is the responsibility of the application administrator.
            
            <c>VolumeMaker</c> starts by creating a directory on disk for the volume root.
            Creating the volume proceeds in phases.  Metadata must be written first, and then
            the folder tree and documents are written.  Each phase is bracketed by calls to
            a corresponding start and end method.  For example, to indicate that the caller
            would like to start writing out information about templates and field definitions,
            call <c>StartTemplatesAndFields</c>.  Calls to <c>AddTemplate</c> and <c>AddField</c>
            can be made.  Once the caller is finished, <c>EndTemplatesAndFields</c> should
            be called.  Calling the start/end pairs are optional if no metadata of that
            type is written.  Entry information, started by a call to <c>StartEntries</c>,
            is required and is always written last.
            
            After <c>StartEntries</c> returns, <c>VolumeMaker</c> is ready to start writing
            out information about folders and documents.  The current path in the repository
            is available as the <c>CurrentFolderPath</c> property and starts out as "\",
            which is the path to the root folder.  When information about an entry is
            written out to the volume, it will appear in Laserfiche in the folder that
            corresponds to the current folder maintained by <c>VolumeMaker</c>.  Writing
            out a folder by calling <c>StartFolder</c> will change the current path to
            that folder, and called <c>EndFolder</c> will change the path to the parent
            folder.  One cannot return to a folder path after leaving it, so all data is
            written out in depth-first order.
            
            Call <c>EndEntries</c> to finalize writing the volume.  After <c>EndEntries</c>
            returns the volume is ready to be attached to Laserfiche.  <c>VolumeMaker</c>
            does not support subsequent modification of the new volume.
            </remarks>
        </member>
        <member name="P:Laserfiche.DocumentServices.VolumeMaker.RootDirectoryPath">
            <summary>
            Gets the path to the root directory of the new volume in the file system.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.VolumeMaker.CurrentFolderPath">
            <summary>
            Gets the current Laserfiche folder path that entries will be written under.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.VolumeMaker.VolumeName">
            <summary>
            Gets the name of the volume.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.#ctor(System.String,System.String)">
            <summary>
            Initializes a <c>VolumeMaker</c> instance.
            </summary>
            <param name="path">The path to the new volume's root directory.</param>
            <param name="volumeName">The name of the new volume.</param>
            <remarks>
            The root directory will be created if it does not already exist.  If a volume
            already exists at the specified path, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartTemplatesAndFields">
            <summary>
            Prepares <c>VolumeMaker</c> for writing out template and field definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddField(Laserfiche.RepositoryAccess.FieldInfo)">
            <summary>
            Writes a template field definition to the volume.
            </summary>
            <param name="field">A <c>FieldInfo</c> instance representing the template field
            definition to write.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddTemplate(Laserfiche.RepositoryAccess.TemplateInfo)">
            <summary>
            Writes a template definition to the volume.
            </summary>
            <param name="template">A <c>TemplateInfo</c> instance representing the template
            definition to write.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndTemplatesAndFields">
            <summary>
            Finalizes writing out template and field definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartEntryLinkTypes">
            <summary>
            Prepares <c>VolumeMaker</c> for writing out entry link type definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddEntryLinkType(Laserfiche.RepositoryAccess.EntryLinkTypeInfo)">
            <summary>
            Writes an entry link type definition to the volume.
            </summary>
            <param name="entryLink">An <c>EntryLinkTypeInfo</c> instance which represents
            the entry link type definition to write out.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndEntryLinkTypes">
            <summary>
            Finalizes writing out entry link type definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartTags">
            <summary>
            Prepares <c>VolumeMaker</c> for writing out entry tag definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddTag(Laserfiche.RepositoryAccess.TagInfo)">
            <summary>
            Writes an entry tag definition to the volume.
            </summary>
            <param name="tag">A <c>TagInfo</c> instance representing the entry tag
            definition to write.</param>
            <returns>The ID of the entry tag definition.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndTags">
            <summary>
            Finalizes writing out entry tag definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartStamps">
            <summary>
            Prepares <c>VolumeMaker</c> for writing out stamp definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddStamp(Laserfiche.RepositoryAccess.StampInfo)">
            <summary>
            Writes out a public stamp definition to the volume.
            </summary>
            <param name="stamp">A <c>StampInfo</c> instance representing the stamp definition
            to write out.</param>
            <returns>The ID of the stamp definition.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddStamp(Laserfiche.RepositoryAccess.StampInfo,System.Security.Principal.SecurityIdentifier)">
            <summary>
            Writes out a personal stamp definition to the volume.
            </summary>
            <param name="stamp">A <c>StampInfo</c> instance representing the stamp definition
            to write out.</param>
            <param name="ownerSid">A <c>SecurityIdentifier</c> instance representing
            the security identifier (SID) of the stamp's owner.</param>
            <returns>The ID of the stamp definition.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndStamps">
            <summary>
            Finalizes writing out stamp definitions.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartEntries">
            <summary>
            Prepares <c>VolumeMaker</c> for writing entry data to the volume.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartFolder(Laserfiche.DocumentServices.CommonEntryProperties)">
            <summary>
            Writes out a new folder definition and changes the current folder to it.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartEmptyFolder(Laserfiche.DocumentServices.CommonEntryProperties)">
            <summary>
            Writes out a new folder definition but does not change the current folder.
            The new folder will have no children.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartFolder(Laserfiche.DocumentServices.CommonEntryProperties,System.String)">
            <summary>
            Writes out a new folder definition and changes the current folder to it.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <param name="templateName">The name of the template to assign to the
            folder.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartEmptyFolder(Laserfiche.DocumentServices.CommonEntryProperties,System.String)">
            <summary>
            Writes out a new folder definition but does not change the current folder.
            The new folder will have no children.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <param name="templateName">The name of the template to assign to the
            folder.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartFolder(Laserfiche.DocumentServices.CommonEntryProperties,System.String,Laserfiche.RepositoryAccess.FieldValueCollection)">
            <summary>
            Writes out a new folder definition and changes the current folder to it.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <param name="templateName">The name of the template to assign to the
            folder.</param>
            <param name="fieldValues">A <c>FieldValueCollection</c> instance which
            represents the template field values to assign to the folder.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartEmptyFolder(Laserfiche.DocumentServices.CommonEntryProperties,System.String,Laserfiche.RepositoryAccess.FieldValueCollection)">
            <summary>
            Writes out a new folder definition but does not change the current folder.
            The new folder will have no children.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <param name="templateName">The name of the template to assign to the
            folder.</param>
            <param name="fieldValues">A <c>FieldValueCollection</c> instance which
            represents the template field values to assign to the folder.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartFolder(Laserfiche.DocumentServices.CommonEntryProperties,Laserfiche.DocumentServices.OptionalEntryProperties)">
            <summary>
            Writes out a new folder definition and changes the current folder to it.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <param name="oep">An <c>OptionalEntryProperties</c> instance which describes
            the optional properties of the folders to write out.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartEmptyFolder(Laserfiche.DocumentServices.CommonEntryProperties,Laserfiche.DocumentServices.OptionalEntryProperties)">
            <summary>
            Writes out a new folder definition but does not change the current folder.
            The new folder will have no children.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance which describes the
            properties of the folder to write out.</param>
            <param name="oep">An <c>OptionalEntryProperties</c> instance which describes
            the optional properties of the folders to write out.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the folder.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndFolder">
            <summary>
            Terminates writing out information for the current folder and changes
            the current folder to the parent folder.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddShortcut(Laserfiche.DocumentServices.CommonEntryProperties,System.Guid)">
            <summary>
            Writes an entry shortcut to the volume in the current folder.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance containing the
            name of the shortcut.</param>
            <param name="target">A <c>Guid</c> value specifying the entry UUID of
            the target.</param>
            <returns>A <c>Guid</c> value representing the entry UUID of the shortcut.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartDocument(Laserfiche.DocumentServices.CommonEntryProperties)">
            <summary>
            Writes a document definition to the volume in the current folder.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance that represents
            the common entry properties for the document.</param>
            <returns>A <c>Guid</c> value that represents the entry UUID of the
            document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartDocument(Laserfiche.DocumentServices.CommonEntryProperties,System.String)">
            <summary>
            Writes a document definition to the volume in the current folder.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance that represents
            the common entry properties for the document.</param>
            <param name="language">The RFC 5646 complaint language tag that specifies
            the natural language the document is written in.</param>
            <returns>A <c>Guid</c> value that represents the entry UUID of the
            document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartDocument(Laserfiche.DocumentServices.CommonEntryProperties,System.String,System.String)">
            <summary>
            Writes a document definition to the volume in the current folder.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance that represents
            the common entry properties for the document.</param>
            <param name="language">The RFC 5646 complaint language tag that specifies
            the natural language the document is written in.</param>
            <param name="templateName">The name of the Laserfiche template to assign
            to the document.</param>
            <returns>A <c>Guid</c> value that represents the entry UUID of the
            document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartDocument(Laserfiche.DocumentServices.CommonEntryProperties,System.String,System.String,Laserfiche.RepositoryAccess.FieldValueCollection)">
            <summary>
            Writes a document definition to the volume in the current folder.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance that represents
            the common entry properties for the document.</param>
            <param name="language">The RFC 5646 complaint language tag that specifies
            the natural language the document is written in.</param>
            <param name="templateName">The name of the Laserfiche template to assign
            to the document.</param>
            <param name="fieldValues">A <c>FieldValueCollection</c> instance representing
            the set of field values to assign to the document.</param>
            <returns>A <c>Guid</c> value that represents the entry UUID of the
            document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartDocument(Laserfiche.DocumentServices.CommonEntryProperties,Laserfiche.DocumentServices.OptionalEntryProperties)">
            <summary>
            Writes a document definition to the volume in the current folder.
            </summary>
            <param name="cep">A <c>CommonEntryProperties</c> instance that represents
            the common entry properties for the document.</param>
            <param name="oep"></param>
            <returns>A <c>Guid</c> value that represents the entry UUID of the
            document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddElecDocument">
            <summary>
            Adds an electronic document file to the current document.
            </summary>
            <returns>The path in the file system to where the electronic document file
            should be placed.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddElecDocument(System.String)">
            <summary>
            Adds an electronic document file to the current document, copying the
            data from the specified file path.
            </summary>
            <param name="externalResource">The path to the external electronic
            document file to copy to the volume.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddElecDocument(Laserfiche.DocumentServices.ElecDocumentAttributes)">
            <summary>
            Adds an electronic document file to the current document.
            </summary>
            <param name="attributes">An <c>ElecDocumentAttributes</c> instance which
            describes the properties of the electronic document.</param>
            <returns>The path in the file system to where the electronic document file
            should be placed.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddElecDocument(Laserfiche.DocumentServices.ElecDocumentAttributes,System.String)">
            <summary>
            Adds an electronic document file to the current document, copying the
            data from the specified file path.
            </summary>
            <param name="attributes">An <c>ElecDocumentAttributes</c> instance which
            describes the properties of the electronic document.</param>
            <param name="externalResource">The path to the external electronic
            document file to copy to the volume.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartPage">
            <summary>
            Adds a page to the current document in the volume.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.StartPage(Laserfiche.DocumentServices.PageAttributes)">
            <summary>
            Adds a page to the current document in the volume.
            </summary>
            <param name="pageProp">A <c>PageAttributes</c> instance which represents
            the properties of the page.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddPagePart(Laserfiche.RepositoryAccess.PagePart)">
            <summary>
            Adds a page part to the current page.
            </summary>
            <param name="pagePart">A member of the <c>PagePart</c> enumeration specifying
            which page part to add.</param>
            <returns>The path to the file in the volume which should contain the page
            part data.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddPagePart(Laserfiche.RepositoryAccess.PagePart,System.String)">
            <summary>
            Adds a page part to the current page.
            </summary>
            <param name="pagePart">A member of the <c>PagePart</c> enumeration specifying
            which page part to add.</param>
            <param name="externalResource">The path to the file containing the page part
            data to copy to the volume.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddAnnotation(Laserfiche.RepositoryAccess.AnnotationBase)">
            <summary>
            Adds an annotation to the current page.
            </summary>
            <param name="annotation">An <c>AnnotationBase</c> derived class instance
            which represents the annotation to add.</param>
            <returns>The path to the file in the volume which should contain the attachment
            data if the annotation is attachment, null otherwise.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.AddAnnotation(Laserfiche.RepositoryAccess.AnnotationBase,Laserfiche.DocumentServices.OptionalAnnotationProperties)">
            <summary>
            Adds an annotation to the current page.
            </summary>
            <param name="annotation">An <c>AnnotationBase</c> derived class instance
            which represents the annotation to add.</param>
            <param name="prop">An <c>OptionalAnnotationProperties</c> specifying additional
            properties of the annotation to write.</param>
            <returns>The path to the file in the volume which should contain the attachment
            data if the annotation is attachment, null otherwise.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndPage">
            <summary>
            Indicates that the current page is finished.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndDocument">
            <summary>
            Indicates that the current document is finished.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.VolumeMaker.EndEntries">
            <summary>
            Indicates that all the entries have been written, and to finalize writing out
            the volume.
            </summary>
        </member>
        <member name="T:Laserfiche.DocumentServices.WatermarkSpecification">
            <summary>
            Represents the specifications of a text watermark on an image.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.Text">
            <summary>
            Gets or sets the text of the watermark.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.HeaderText">
            <summary>
            Gets or sets the header text of the watermark.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.FooterText">
            <summary>
            Gets or sets the footer text of the watermark.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.Span">
            <summary>
            Gets or sets the span percentage of the text.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.Angle">
            <summary>
            Gets or sets the angle of the watermark (in degrees).
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.Position">
            <summary>
            Gets or sets the position of the watermark.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.HeaderScale">
            <summary>
            Gets or sets the size of the header text as a percent of the watermark text size.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.FooterScale">
            <summary>
            Gets or sets the size of the footer text as a percent of the watermark text size.
            </summary>
        </member>
        <member name="P:Laserfiche.DocumentServices.WatermarkSpecification.Intensity">
            <summary>
            Gets or sets the intensity of the watermark. Range from 0 to 100, -1 for not set.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.#ctor">
            <summary>
            Initializes a <c>WatermarkSpecification</c> with default properties.
            </summary>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.#ctor(System.String,System.Int32,System.Int32,Laserfiche.RepositoryAccess.WatermarkPosition,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a <c>WatermarkSpecification</c> using the specified
            text, span, angle, xPos, yPos, headerText, headerScale, footerText, and footerScale
            </summary>
            <param name="text">A string representing the watermark text.</param>
            <param name="span">An int value representing the percent of the
            page that the watermark will span.</param>
            <param name="angle">An int value representing the angle at which
            the text will be displayed.</param>
            <param name="pos"> An <c>WatermorkPosition</c> instance representing the  position
            on the page to draw the watermark.</param>
            <param name="headerText"> A string representing the watermark header text.</param>
            <param name="headerScale"> An int value representing the the size of the header text
            as a percentage of the main watermark text size.</param>
            <param name="footerText"> A string representing the watermark footer text.</param>
            <param name="footerScale"> An int value representing the the size of the footer text
            as a percentage of the main watermark text size.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.#ctor(System.String,System.Int32,System.Int32,Laserfiche.RepositoryAccess.WatermarkPosition,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a <c>WatermarkSpecification</c> using the specified
            text, span, angle, xPos, yPos, headerText, headerScale, footerText, and footerScale
            </summary>
            <param name="text">A string representing the watermark text.</param>
            <param name="span">An int value representing the percent of the
            page that the watermark will span.</param>
            <param name="angle">An int value representing the angle at which
            the text will be displayed.</param>
            <param name="pos"> An <c>WatermorkPosition</c> instance representing the  position
            on the page to draw the watermark.</param>
            <param name="headerText"> A string representing the watermark header text.</param>
            <param name="headerScale"> An int value representing the the size of the header text
            as a percentage of the main watermark text size.</param>
            <param name="footerText"> A string representing the watermark footer text.</param>
            <param name="footerScale"> An int value representing the the size of the footer text
            as a percentage of the main watermark text size.</param>
            <param name="intensity"> An int value representing the the intensity of the watermark.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.#ctor(System.String,System.Int32,System.Int32,Laserfiche.RepositoryAccess.WatermarkPosition)">
            <summary>
            Initializes a <c>WatermarkSpecification</c> using the specified
            text, span, angle, xPos, and yPos
            </summary>
            <param name="text">A string representing the watermark text.</param>
            <param name="span">An <c>Int</c> value representing the percent of the
            page that the watermark will span.</param>
            <param name="angle">An <c>Int</c> value representing the angle at which
            the text will be displayed.</param>
            <param name="pos"> An <c>WatermorkPosition</c> instance representing the  position
            on the page to draw the watermark.</param>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.BuildWMSpecificationList(System.String,System.Collections.Generic.IEnumerable{Laserfiche.RepositoryAccess.TagWatermark},Laserfiche.RepositoryAccess.Session)">
            <summary>
            Builds a WatermarkSpecification redactions for a document from a combination of a group
            watermark and a collection of zero or more tag watermarks.
            </summary>
            <param name="groupWM">The group watermark text to use.</param>
            <param name="tagWMs">A collection of TagWatermark instances specifying the tag
            watermarks to use.</param>
            <param name="session">The Laserfiche session.</param>
            <returns>A redactions of WatermarkSpecification instances describing how to draw
            the specified watermarks on a document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.BuildWMSpecificationList(System.String,Laserfiche.RepositoryAccess.Session)">
            <summary>
            Builds a WatermarkSpecification redactions for a document from a group watermark.
            </summary>
            <param name="groupWM">The group watermark text to use.</param>
            <param name="session">The Laserfiche session.</param>
            <returns>A redactions of WatermarkSpecification instances describing how to draw
            the specified watermarks on a document.</returns>
        </member>
        <member name="M:Laserfiche.DocumentServices.WatermarkSpecification.BuildWMSpecificationList(System.Collections.Generic.IEnumerable{Laserfiche.RepositoryAccess.TagWatermark})">
            <summary>
            Builds a WatermarkSpecification redactions for a document from a collection of zero or
            more tag watermarks.
            </summary>
            <param name="tagWMs">A collection of TagWatermark instances specifying the tag
            watermarks to use.</param>
            <returns>A redactions of WatermarkSpecification instances describing how to draw
            the specified watermarks on a document.</returns>
        </member>
    </members>
</doc>
